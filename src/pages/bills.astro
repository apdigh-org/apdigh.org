---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/layout/Header.astro';
import Footer from '../components/layout/Footer.astro';
import { SITE } from '../constants/site';
import { getAllBills } from '../utils/bills';
import { marked } from 'marked';

// Load all bills from JSON files
const bills = await getAllBills();

// Helper function to trim summary and render markdown
function renderSummary(summary: string, maxLength: number = 300): string {
  // Trim to max length
  let trimmed = summary.length > maxLength
    ? summary.substring(0, maxLength).trim() + '...'
    : summary;

  // Parse markdown to HTML
  return marked.parseInline(trimmed);
}
---

<BaseLayout
  title={`Tech Bills - ${SITE.name}`}
  description="Browse all proposed bills affecting Ghana's digital innovation sector. Understand impacts on startups, tech policy, and the digital economy."
>
  <Header />

  <main id="main-content" class="flex-1 text-gray-900">
    <!-- Page Header -->
    <section class="bg-gradient-to-b from-white to-gray-50 py-12 md:py-16 border-b border-gray-200">
      <div class="container">
        <div class="max-w-6xl mx-auto">
          <!-- Breadcrumbs -->
          <nav class="flex items-center gap-2 text-sm text-gray-600 mb-6">
            <a href="/" class="hover:text-[var(--color-primary)] transition-colors">Home</a>
            <i class="ti ti-chevron-right text-gray-400"></i>
            <span class="text-gray-900 font-medium">Bills</span>
          </nav>

          <div>
            <h1 class="text-4xl md:text-5xl font-bold text-black mb-4">
              Tech Bills Affecting Digital Innovation
            </h1>
            <p class="text-lg md:text-xl text-gray-900 font-medium">
              Track proposed legislation that impacts Ghana's tech sector, startups, and digital economy
            </p>
          </div>
        </div>
      </div>
    </section>

    <!-- Filters Section -->
    <section class="py-8 bg-white border-b border-gray-200">
      <div class="container">
        <div class="flex flex-wrap gap-4 items-center justify-between">
          <!-- Search -->
          <div class="flex-1 min-w-[300px]">
            <div class="relative">
              <i class="ti ti-search absolute left-4 top-1/2 -translate-y-1/2 text-gray-400"></i>
              <input
                id="bill-search"
                type="text"
                placeholder="Search bills..."
                class="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-lg focus:border-[var(--color-primary)] focus:outline-none"
              />
            </div>
          </div>

          <!-- Filter Buttons -->
          <div class="flex flex-wrap gap-2">
            <button class="px-4 py-2 bg-[var(--color-primary)] text-white rounded-lg font-medium hover:bg-[#1E5A5A] transition-colors">
              All Bills
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Bills Grid -->
    <section class="py-12 md:py-16 bg-white">
      <div class="container">
        <div id="bills-grid" class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {bills.map((bill) => (
            <article
              class="bill-card bg-white border-2 border-gray-200 rounded-xl p-6 hover:border-[var(--color-primary)] hover:shadow-lg transition-all duration-300 flex flex-col"
              data-title={bill.title.toLowerCase()}
              data-summary={bill.summary.toLowerCase()}
            >
              <!-- Title -->
              <h2 class="text-2xl font-bold text-black mb-3 hover:text-[var(--color-primary)] transition-colors">
                <a href={`/bills/${bill.id}`}>{bill.title}</a>
              </h2>

              <!-- Summary -->
              <div class="text-gray-900 font-medium leading-relaxed mb-4 flex-grow prose prose-sm max-w-none" set:html={renderSummary(bill.summary)} />

              <!-- Actions -->
              <div class="pt-4 border-t border-gray-200">
                <a
                  href={`/bills/${bill.id}`}
                  class="w-full inline-flex items-center justify-center gap-2 px-4 py-3 bg-[var(--color-primary)] text-white font-semibold rounded-lg hover:bg-[#1E5A5A] transition-colors"
                >
                  <i class="ti ti-file-text"></i>
                  Read Analysis
                </a>
              </div>
            </article>
          ))}
        </div>

        <!-- Empty State (shown when no search results) -->
        <div id="empty-state" class="hidden text-center py-16">
          <i class="ti ti-file-search text-6xl text-gray-300 mb-4"></i>
          <h3 class="text-2xl font-bold text-gray-900 mb-2">No bills found</h3>
          <p class="text-gray-600">Try adjusting your search terms</p>
        </div>
      </div>
    </section>

    <!-- CTA Section -->
    <section class="py-12 md:py-16 bg-gradient-to-br from-[var(--color-primary)] to-[#1E5A5A] text-white">
      <div class="container">
        <div class="text-center max-w-6xl mx-auto">
          <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">Stay Updated on Tech Policy</h2>
          <p class="text-lg opacity-95 mb-8">Get notified when new bills are introduced or when there are updates to existing legislation</p>
          <div class="flex flex-wrap gap-4 justify-center">
            <a href="#subscribe" class="inline-flex items-center justify-center px-8 py-4 text-lg font-semibold text-[var(--color-primary)] bg-white border-2 border-white rounded-lg hover:bg-gray-50 hover:-translate-y-0.5 transition-all duration-300">
              <i class="ti ti-bell mr-2"></i>
              Subscribe to Updates
            </a>
          </div>
        </div>
      </div>
    </section>
  </main>

  <Footer />
</BaseLayout>

<script>
  // Search functionality
  const searchInput = document.getElementById('bill-search') as HTMLInputElement;
  const billCards = document.querySelectorAll('.bill-card');
  const emptyState = document.getElementById('empty-state');
  const billsGrid = document.getElementById('bills-grid');

  let debounceTimer: number;

  function filterBills(searchTerm: string) {
    const query = searchTerm.toLowerCase().trim();
    let visibleCount = 0;

    // Convert NodeList to array and sort by relevance
    const cardsArray = Array.from(billCards);

    // Score each card
    const scoredCards = cardsArray.map((card) => {
      const title = card.getAttribute('data-title') || '';
      const summary = card.getAttribute('data-summary') || '';

      let score = 0;

      if (query === '') {
        score = 1; // Show all when no query
      } else {
        // Title match is worth more (score 2)
        if (title.includes(query)) {
          score += 2;
        }
        // Summary match is worth less (score 1)
        if (summary.includes(query)) {
          score += 1;
        }
      }

      return { card, score };
    });

    // Sort by score descending (title matches first)
    scoredCards.sort((a, b) => b.score - a.score);

    // Show/hide based on score and reorder
    scoredCards.forEach(({ card, score }, index) => {
      if (score > 0) {
        (card as HTMLElement).style.display = '';
        (card as HTMLElement).style.order = index.toString();
        visibleCount++;
      } else {
        (card as HTMLElement).style.display = 'none';
      }
    });

    // Show/hide empty state
    if (visibleCount === 0 && query !== '') {
      billsGrid?.classList.add('hidden');
      emptyState?.classList.remove('hidden');
    } else {
      billsGrid?.classList.remove('hidden');
      emptyState?.classList.add('hidden');
    }
  }

  // Debounced search
  searchInput?.addEventListener('input', (e) => {
    clearTimeout(debounceTimer);
    debounceTimer = window.setTimeout(() => {
      filterBills((e.target as HTMLInputElement).value);
    }, 300);
  });
</script>
