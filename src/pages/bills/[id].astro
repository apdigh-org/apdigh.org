---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/layout/Header.astro';
import Footer from '../../components/layout/Footer.astro';
import { SITE } from '../../constants/site';
import { IMPACT_CATEGORIES, getImpactName, type ImpactKey } from '../../constants/impacts';
import { getAllBills } from '../../utils/bills';
import { getBillOGImage } from '../../utils/seo';
import { marked } from 'marked';

// Generate static paths for all bills from JSON files
export async function getStaticPaths() {
  const bills = await getAllBills();

  return bills.map((bill) => ({
    params: { id: bill.id },
    props: { bill, allBills: bills },
  }));
}

const { bill, allBills } = Astro.props;

// Map related bill IDs to full bill objects
const relatedBillsWithData = bill.relatedBills?.map((relatedId: string) => {
  return allBills.find((b: any) => b.id === relatedId);
}).filter(Boolean) || [];

// Generate SEO-friendly description from summary (strip markdown, limit length)
function generateMetaDescription(summary: string): string {
  // Remove markdown syntax
  const plainText = summary
    .replace(/[*_~`#]/g, '')  // Remove markdown formatting
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')  // Convert links to plain text
    .replace(/\n+/g, ' ')  // Replace newlines with spaces
    .trim();

  // Limit to 155 characters for optimal SEO
  if (plainText.length <= 155) return plainText;
  return plainText.substring(0, 152).trim() + '...';
}

const metaDescription = generateMetaDescription(bill.summary);

// Helper to truncate text at word boundary
function truncateText(text: string, maxLength: number): { truncated: string, isTruncated: boolean } {
  if (text.length <= maxLength) {
    return { truncated: text, isTruncated: false };
  }

  // Find last space before maxLength
  const lastSpace = text.lastIndexOf(' ', maxLength);
  const cutPoint = lastSpace > 0 ? lastSpace : maxLength;

  return {
    truncated: text.substring(0, cutPoint) + '...',
    isTruncated: true
  };
}

// Helper function for impact badge styling
const getImpactBadgeClass = (score: string) => {
  switch (score) {
    case 'severe-negative':
      return 'bg-red-200 text-red-900 border-red-300';
    case 'high-negative':
      return 'bg-red-100 text-red-700 border-red-200';
    case 'medium-negative':
      return 'bg-orange-100 text-orange-700 border-orange-200';
    case 'low-negative':
      return 'bg-yellow-100 text-yellow-700 border-yellow-200';
    case 'neutral':
      return 'bg-gray-100 text-gray-700 border-gray-200';
    case 'low-positive':
      return 'bg-blue-100 text-blue-700 border-blue-200';
    case 'medium-positive':
      return 'bg-green-100 text-green-700 border-green-200';
    case 'high-positive':
      return 'bg-emerald-100 text-emerald-700 border-emerald-200';
    case 'severe-positive':
      return 'bg-emerald-200 text-emerald-900 border-emerald-300';
    default:
      return 'bg-gray-100 text-gray-700 border-gray-200';
  }
};

const getImpactLabel = (score: string) => {
  switch (score) {
    case 'severe-negative':
      return 'Severe Negative Impact';
    case 'high-negative':
      return 'High Negative Impact';
    case 'medium-negative':
      return 'Medium Negative Impact';
    case 'low-negative':
      return 'Low Negative Impact';
    case 'neutral':
      return 'Neutral Impact';
    case 'low-positive':
      return 'Low Positive Impact';
    case 'medium-positive':
      return 'Medium Positive Impact';
    case 'high-positive':
      return 'High Positive Impact';
    case 'severe-positive':
      return 'Severe Positive Impact';
    default:
      return 'Unknown Impact';
  }
};

const getImpactDescription = (score: string) => {
  switch (score) {
    case 'severe-negative':
      return 'Fundamental violations of rule of law or human rights standards that would be struck down as unconstitutional in established democracies.';
    case 'high-negative':
      return 'Significant departures from international best practices that exceed norms in most OECD countries.';
    case 'medium-negative':
      return 'Within the range of democratic practice but missing some procedural refinements or safeguards. Standard government powers that lack optimal oversight.';
    case 'low-negative':
      return 'Minor administrative or technical changes with negligible practical impact.';
    case 'neutral':
      return 'No meaningful impact on this topic area.';
    case 'low-positive':
      return 'Minor beneficial changes or improvements to existing frameworks.';
    case 'medium-positive':
      return 'Moderate improvements to rights, processes, or innovation.';
    case 'high-positive':
      return 'Significant benefits that enable innovation or meaningfully protect important rights.';
    case 'severe-positive':
      return 'Transformative positive change for rights, freedoms, or innovation.';
    default:
      return '';
  }
};

// Helper to get provision details
const getProvisionLabel = (provisionId: string) => {
  const provision = bill.provisions?.find(p => p.id === provisionId);
  return provision ? provision.title : provisionId;
};

// Helper function for severity badge styling
const getSeverityConfig = (severity: string) => {
  switch (severity) {
    case 'critical':
      return {
        icon: 'alert-triangle',
        bgColor: 'bg-red-50',
        borderColor: 'border-red-200',
        iconBgColor: 'bg-red-100',
        iconTextColor: 'text-red-600',
        badgeClass: 'bg-red-100 text-red-700 border-red-200',
        label: 'Critical',
      };
    case 'high':
      return {
        icon: 'alert-circle',
        bgColor: 'bg-orange-50',
        borderColor: 'border-orange-200',
        iconBgColor: 'bg-orange-100',
        iconTextColor: 'text-orange-600',
        badgeClass: 'bg-orange-100 text-orange-700 border-orange-200',
        label: 'High',
      };
    case 'medium':
      return {
        icon: 'info-circle',
        bgColor: 'bg-yellow-50',
        borderColor: 'border-yellow-200',
        iconBgColor: 'bg-yellow-100',
        iconTextColor: 'text-yellow-600',
        badgeClass: 'bg-yellow-100 text-yellow-700 border-yellow-200',
        label: 'Medium',
      };
    default:
      return {
        icon: 'alert-circle',
        bgColor: 'bg-gray-50',
        borderColor: 'border-gray-200',
        iconBgColor: 'bg-gray-100',
        iconTextColor: 'text-gray-600',
        badgeClass: 'bg-gray-100 text-gray-700 border-gray-200',
        label: severity,
      };
  }
};

// Prepare executive summary with truncation (1200 chars for more context)
const summaryTruncation = truncateText(bill.summary, 1200);

// Show all impact categories, with data if available
const impactsToDisplay = Object.keys(IMPACT_CATEGORIES).map((key) => {
  const impact = bill.impacts?.[key];
  const impactData = impact || {
    score: 'neutral',
    description: {
      analysis: 'Our analysis found no provisions high impact in this category. This suggests the bill does not significantly affect this area, though minor or indirect impacts may exist. Review the full provisions below to verify.'
    },
    relatedProvisions: []
  };

  // Pre-calculate truncation if description exists (400 chars for more detail)
  let truncationInfo = { truncated: '', isTruncated: false, full: '' };
  if (impactData.description?.analysis) {
    const { truncated, isTruncated } = truncateText(impactData.description.analysis, 400);
    truncationInfo = {
      truncated,
      isTruncated,
      full: impactData.description.analysis
    };
  }

  return [
    key,
    { ...impactData, truncationInfo }
  ];
});
---

<BaseLayout
  title={`${bill.title} | Impact Analysis & Key Concerns`}
  description={metaDescription}
  ogImage={getBillOGImage(bill.id)}
  ogType="article"
  canonicalURL={`https://apdigh.org/bills/${bill.id}`}
>
  <!-- Structured Data for SEO -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": bill.title,
    "description": metaDescription,
    "author": {
      "@type": "Organization",
      "name": SITE.fullName
    },
    "publisher": {
      "@type": "Organization",
      "name": SITE.fullName,
      "url": "https://apdigh.org"
    },
    "about": {
      "@type": "LegislativeProposal",
      "name": bill.title,
      "description": metaDescription
    },
    "keywords": "Ghana legislation, tech policy, digital rights, bill analysis, " + bill.title,
    "inLanguage": "en"
  })} />

  <Header />

  <main id="main-content" class="flex-1 text-gray-900">
    <!-- Bill Header -->
    <section class="bg-gradient-to-b from-white to-gray-50 py-12 md:py-16 border-b border-gray-200">
      <div class="container">
        <div class="max-w-6xl mx-auto">
          <!-- Breadcrumbs -->
          <nav class="flex items-center gap-2 text-sm text-gray-600 mb-6">
            <a href="/" class="hover:text-[var(--color-primary)] transition-colors">Home</a>
            <i class="ti ti-chevron-right text-gray-400"></i>
            <a href="/bills" class="hover:text-[var(--color-primary)] transition-colors">Bills</a>
            <i class="ti ti-chevron-right text-gray-400"></i>
            <span class="text-gray-900 font-medium">{bill.title}</span>
          </nav>

          <!-- Title -->
          <h1 class="text-4xl md:text-5xl font-bold text-black mb-4 leading-tight">
            {bill.title}
          </h1>


          <!-- Action Buttons -->
          <div class="flex flex-wrap gap-4">
            <a
              href="#take-action"
              class="inline-flex items-center gap-2 px-6 py-3 bg-[var(--color-primary)] text-white font-semibold rounded-lg hover:bg-[#1E5A5A] transition-colors"
            >
              <i class="ti ti-speakerphone"></i>
              Take Action Now
            </a>
            {bill.pdfPath ? (
              <a
                href={`/${bill.pdfPath}`}
                download
                class="inline-flex items-center gap-2 px-6 py-3 bg-white text-gray-700 border-2 border-gray-200 font-semibold rounded-lg hover:border-[var(--color-primary)] hover:text-[var(--color-primary)] transition-colors"
              >
                <i class="ti ti-download"></i>
                Download PDF
              </a>
            ) : (
              <button
                disabled
                class="inline-flex items-center gap-2 px-6 py-3 bg-gray-100 text-gray-400 border-2 border-gray-200 font-semibold rounded-lg cursor-not-allowed"
                title="PDF not available"
              >
                <i class="ti ti-download"></i>
                Download PDF
              </button>
            )}
            <button
              onclick="shareBill()"
              class="inline-flex items-center gap-2 px-6 py-3 bg-white text-gray-700 border-2 border-gray-200 font-semibold rounded-lg hover:border-[var(--color-primary)] hover:text-[var(--color-primary)] transition-colors"
            >
              <i class="ti ti-share"></i>
              Share
            </button>
          </div>
        </div>
      </div>
    </section>

    <div class="container">
      <div class="max-w-6xl mx-auto py-12 md:py-16">
        <!-- Main Content -->
        <div class="space-y-12">
            <!-- NotebookLM Video -->
            <section>
              <h2 class="text-3xl font-bold text-black mb-4 flex items-center gap-3">
                <i class="ti ti-video text-[var(--color-primary)]"></i>
                Listen: AI-Powered Analysis
              </h2>
              <div class="bg-white border-2 border-gray-200 rounded-xl p-6">
                <div class="aspect-video bg-gray-100 rounded-lg flex items-center justify-center mb-4">
                  <div class="text-center text-gray-500">
                    <i class="ti ti-player-play text-6xl mb-4"></i>
                    <p class="text-lg font-medium">NotebookLM Audio Overview</p>
                    <p class="text-sm">Duration: {bill.notebookLMVideo.duration}</p>
                  </div>
                </div>
                <p class="text-sm text-gray-600">
                  Listen to an AI-generated discussion breaking down this bill in plain language, exploring its key provisions and potential impacts on Ghana's digital innovation sector.
                </p>
              </div>
            </section>

            <!-- Executive Summary -->
            <section>
              <h2 class="text-3xl font-bold text-black mb-4 flex items-center gap-3">
                <i class="ti ti-file-text text-[var(--color-primary)]"></i>
                Executive Summary
              </h2>
              <div class="bg-white border-2 border-gray-200 rounded-xl p-6">
                <div id="summary-content" class="text-lg text-gray-900 font-medium leading-relaxed prose prose-lg max-w-none">
                  <div set:html={marked.parse(bill.summary)} />
                </div>
                {summaryTruncation.isTruncated && (
                  <button
                    id="summary-toggle"
                    class="mt-4 text-[var(--color-primary)] hover:text-[#1E5A5A] font-medium text-sm flex items-center gap-1 transition-colors"
                    onclick="toggleSummary()"
                  >
                    <span id="summary-toggle-text">Read full summary</span>
                    <i id="summary-toggle-icon" class="ti ti-chevron-down"></i>
                  </button>
                )}
              </div>
            </section>

            <!-- Impact Analysis -->
            <section id="impact-analysis">
              <h2 class="text-3xl font-bold text-black mb-4 flex items-center gap-3">
                <i class="ti ti-chart-line text-[var(--color-primary)]"></i>
                Impact Analysis
              </h2>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 auto-rows-fr">
                {impactsToDisplay.map(([impactKey, impact]) => {
                  const category = IMPACT_CATEGORIES[impactKey as ImpactKey];
                  if (!category) return null;

                  return (
                    <div id={`impact-${impactKey}`} class="bg-white border-2 border-gray-200 rounded-xl p-6 hover:border-[var(--color-primary)] transition-colors scroll-mt-24 flex flex-col">
                      <div class="flex items-start gap-4 mb-4">
                        <div class={`flex-shrink-0 w-12 h-12 ${category.bgColor} rounded-lg flex items-center justify-center`}>
                          <i class={`ti ti-${category.icon} text-2xl ${category.iconColorClass}`}></i>
                        </div>
                        <div class="flex-1">
                          <h3 class="text-xl font-bold text-black mb-2">{category.name}</h3>
                          <div class="relative inline-block group">
                            <span
                              class={`inline-block px-3 py-1 text-xs font-semibold rounded-full border ${getImpactBadgeClass(impact.score)} cursor-help`}
                            >
                              {getImpactLabel(impact.score)}
                              <i class="ti ti-info-circle ml-1 text-xs opacity-60"></i>
                            </span>
                            <div class="tooltip opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 absolute z-10 bottom-full left-1/2 -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-xs rounded-lg shadow-lg max-w-xs whitespace-normal">
                              {getImpactDescription(impact.score)}
                              <div class="tooltip-arrow absolute top-full left-1/2 -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="mb-4 flex-grow">
                        {impact.truncationInfo.truncated ? (
                          <div class="text-gray-900 leading-relaxed">
                            <div class="prose max-w-none" set:html={marked.parse(impact.truncationInfo.truncated)} />
                            {impact.truncationInfo.isTruncated && (
                              <button
                                class="mt-2 text-[var(--color-primary)] hover:text-[#1E5A5A] font-medium text-sm flex items-center gap-1 transition-colors"
                                onclick={`openImpactModal('${impactKey}', ${JSON.stringify(category.name)}, ${JSON.stringify(impact.truncationInfo.full)})`}
                              >
                                Read full analysis
                                <i class="ti ti-arrow-right"></i>
                              </button>
                            )}
                          </div>
                        ) : (
                          <div class="text-gray-700 leading-relaxed italic">
                            Our analysis found no provisions with severe or high impact in this category. This suggests the bill does not significantly affect this area.
                            Below you may find provisions with possible impacts.
                          </div>
                        )}
                      </div>
                      {impact.relatedProvisions && impact.relatedProvisions.length > 0 && (
                        <div class="pt-4 border-t border-gray-200 mt-auto">
                          <span class="text-sm font-semibold text-gray-600 block mb-3">Related Provisions:</span>
                          <div class="max-h-38 overflow-y-auto">
                            <div class="flex flex-wrap gap-2 p-3 bg-gray-50 rounded-lg">
                              {impact.relatedProvisions.map((provisionId) => {
                                // Find this provision to get its impact level for this category
                                const provision = bill.provisions.find(p => p.id === provisionId);
                                const hasThisImpact = provision?.relatedImpacts?.includes(impactKey);

                                // Use the overall impact score for this category as approximation
                                const impactScore = impact.score;
                                const impactLabel = getImpactLabel(impactScore);
                                const impactDescription = getImpactDescription(impactScore);

                                // Get background color based on severity
                                let bgColor = 'bg-gray-100';
                                let textColor = 'text-gray-800';
                                if (impactScore.includes('severe-negative')) {
                                  bgColor = 'bg-red-100';
                                  textColor = 'text-red-900';
                                } else if (impactScore.includes('high-negative')) {
                                  bgColor = 'bg-orange-100';
                                  textColor = 'text-orange-900';
                                } else if (impactScore.includes('medium-negative')) {
                                  bgColor = 'bg-yellow-100';
                                  textColor = 'text-yellow-900';
                                } else if (impactScore.includes('low-negative')) {
                                  bgColor = 'bg-yellow-50';
                                  textColor = 'text-yellow-800';
                                } else if (impactScore.includes('positive')) {
                                  bgColor = 'bg-green-100';
                                  textColor = 'text-green-900';
                                }

                                return (
                                  <a
                                    href={`#${provisionId}`}
                                    class={`inline-flex items-center gap-2 text-xs px-3 py-2 ${bgColor} ${textColor} font-medium rounded-full hover:ring-2 hover:ring-current transition-all`}
                                    title={`${impactLabel}: ${impactDescription}`}
                                  >
                                    <i class="ti ti-arrow-down text-xs"></i>
                                    <span>{getProvisionLabel(provisionId)}</span>
                                  </a>
                                );
                              })}
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </section>

            <!-- Key Concerns - Prominent Alert Box -->
            {bill.keyConcerns && bill.keyConcerns.length > 0 && (
              <section id="key-concerns" class="scroll-mt-24">
                <div class="bg-gradient-to-br from-red-50 to-orange-50 border-2 border-red-200 rounded-xl p-8">
                  <div class="flex items-start gap-4 mb-6">
                    <div class="flex-shrink-0 w-16 h-16 bg-red-100 rounded-xl flex items-center justify-center">
                      <i class="ti ti-alert-triangle text-4xl text-red-600"></i>
                    </div>
                    <div>
                      <h2 class="text-3xl font-bold text-black mb-2">Critical Issues with This Bill</h2>
                      <p class="text-lg text-gray-800">
                        These concerns pose significant risks to Ghana's digital innovation ecosystem
                      </p>
                    </div>
                  </div>

                  <div class="overflow-x-auto -mx-8 px-8">
                    <div class="flex items-stretch gap-4 pb-4" style="min-width: min-content;">
                      {bill.keyConcerns.map((concern, index) => {
                        const severityConfig = getSeverityConfig(concern.severity);
                        return (
                          <div id={concern.id} class="bg-white border-2 border-red-200 rounded-lg p-5 scroll-mt-24 hover:border-red-400 transition-colors flex-shrink-0 w-[340px] flex flex-col">
                            <div class="flex items-center justify-between gap-3 mb-3">
                              <div class="flex items-center gap-3 flex-1">
                                <div class="flex-shrink-0 w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center">
                                  <span class="text-lg font-bold text-red-600">{index + 1}</span>
                                </div>
                                <span class={`px-2 py-1 text-xs font-semibold rounded border ${severityConfig.badgeClass}`}>
                                  {severityConfig.label}
                                </span>
                              </div>
                              <a
                                href={`/bills/${bill.id}/concerns/${concern.id}`}
                                class="flex-shrink-0 inline-flex items-center justify-center w-8 h-8 bg-[var(--color-primary)] text-white rounded-lg hover:bg-[#1E5A5A] transition-colors"
                                aria-label="Open full analysis"
                                title="Open full analysis"
                              >
                                <i class="ti ti-external-link text-base"></i>
                              </a>
                            </div>

                            <h3 class="text-lg font-bold mb-3 leading-tight h-14 flex items-center">
                              <a href={`/bills/${bill.id}/concerns/${concern.id}`} class="text-black hover:text-[var(--color-primary)] transition-colors">
                                {concern.title}
                              </a>
                            </h3>

                            <div
                              class="text-sm text-gray-700 leading-relaxed mb-4 flex-1 prose prose-sm max-w-none"
                              set:html={marked.parse(concern.description)}
                            />

                            {concern.relatedProvisions && concern.relatedProvisions.length > 0 && (
                              <div class="pt-3 border-t border-gray-200 mt-auto">
                                <span class="text-xs font-semibold text-gray-500 block mb-2">See Details:</span>
                                <div class="flex flex-wrap gap-1">
                                  {concern.relatedProvisions.map((provisionId) => (
                                    <a
                                      href={`#${provisionId}`}
                                      class="inline-flex items-center gap-1 text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded hover:bg-[var(--color-primary)] hover:text-white transition-colors"
                                    >
                                      <i class="ti ti-arrow-down"></i>
                                      <span>{bill.provisions?.find(p => p.id === provisionId)?.title || provisionId}</span>
                                    </a>
                                  ))}
                                </div>
                              </div>
                            )}
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              </section>
            )}

            <!-- Key Provisions -->
            <section id="key-provisions">
              <div class="flex items-center justify-between mb-4">
                <h2 class="text-3xl font-bold text-black flex items-center gap-3">
                  <i class="ti ti-list-details text-[var(--color-primary)]"></i>
                  Key Provisions
                </h2>
              </div>
              <div class="bg-white border-2 border-gray-200 rounded-xl divide-y divide-gray-200">
                {bill.provisions?.map((provision) => (
                  <details class="group scroll-mt-24" id={provision.id}>
                    <summary class="flex items-center justify-between p-6 cursor-pointer hover:bg-gray-50 transition-colors">
                      <div class="flex items-center gap-3">
                        <i class="ti ti-file-text text-[var(--color-primary)]"></i>
                        <span class="text-lg font-semibold text-black">{provision.title}</span>
                      </div>
                      <i class="ti ti-chevron-down text-gray-400 group-open:rotate-180 transition-transform flex-shrink-0"></i>
                    </summary>
                    <div class="px-6 pt-2 pb-6 space-y-4">
                      {/* Impact badges */}
                      {provision.relatedImpacts && provision.relatedImpacts.length > 0 && (
                        <div class="bg-gray-50 rounded-lg px-4 py-2">
                          <div class="flex flex-wrap items-center gap-2">
                            <span class="text-xs font-semibold text-gray-600">This provision affects:</span>
                            {provision.relatedImpacts.map((impactKey) => {
                              const category = IMPACT_CATEGORIES[impactKey as ImpactKey];
                              const impactData = bill.impacts?.[impactKey];
                              const impactScore = impactData?.score || 'neutral';

                              if (!category) return null;

                              const impactLabel = getImpactLabel(impactScore);
                              const impactDescription = getImpactDescription(impactScore);

                              // Get background color based on severity
                              let bgColor = 'bg-gray-100';
                              let textColor = 'text-gray-800';
                              if (impactScore.includes('severe-negative')) {
                                bgColor = 'bg-red-100';
                                textColor = 'text-red-900';
                              } else if (impactScore.includes('high-negative')) {
                                bgColor = 'bg-orange-100';
                                textColor = 'text-orange-900';
                              } else if (impactScore.includes('medium-negative')) {
                                bgColor = 'bg-yellow-100';
                                textColor = 'text-yellow-900';
                              } else if (impactScore.includes('low-negative')) {
                                bgColor = 'bg-yellow-50';
                                textColor = 'text-yellow-800';
                              } else if (impactScore.includes('positive')) {
                                bgColor = 'bg-green-100';
                                textColor = 'text-green-900';
                              }

                              return (
                                <a
                                  href={`#impact-${impactKey}`}
                                  class={`inline-flex items-center gap-2 text-xs px-3 py-1.5 ${bgColor} ${textColor} font-medium rounded-full border-2 border-transparent hover:border-current transition-all`}
                                  title={`${impactLabel}: ${impactDescription}`}
                                >
                                  <i class={`ti ti-${category.icon} text-sm ${category.iconColorClass}`}></i>
                                  <span>{category.name}</span>
                                  <i class="ti ti-arrow-up text-xs"></i>
                                </a>
                              );
                            })}
                          </div>
                        </div>
                      )}

                      {/* Plain language explanation */}
                      <div>
                        <h4 class="text-sm font-semibold text-gray-600 mb-2">Plain Language Summary</h4>
                        <div
                          class="text-gray-900 leading-relaxed prose max-w-none"
                          set:html={marked.parse(provision.plainLanguage)}
                        />
                      </div>

                      {/* Raw text with toggle */}
                      <details class="border-2 border-gray-200 rounded-lg overflow-hidden">
                        <summary class="px-4 py-3 cursor-pointer hover:bg-gray-50 transition-colors flex items-center gap-2 bg-white">
                          <i class="ti ti-file-text text-gray-600"></i>
                          <span class="text-sm font-semibold text-gray-700">Show Original Legal Text</span>
                        </summary>
                        <div class="px-4 py-4 bg-gray-50 border-t-2 border-gray-200">
                          <div class="max-h-96 overflow-y-auto">
                            <div
                              class="text-sm text-gray-700 leading-relaxed italic border-l-4 border-[var(--color-primary)] pl-4 py-2 prose prose-sm max-w-none"
                              set:html={marked.parse(provision.rawText)}
                            />
                          </div>
                          <p class="text-xs text-gray-500 mt-3 pt-3 border-t border-gray-300">
                            <i class="ti ti-info-circle text-gray-400"></i>
                            Note: This text is extracted from the PDF and may contain formatting errors or inaccuracies. For full accuracy, please refer to the official PDF document.
                          </p>
                        </div>
                      </details>
                    </div>
                  </details>
                ))}
              </div>
            </section>

            <!-- Take Action -->
            <section id="take-action">
              <h2 class="text-3xl font-bold text-black mb-4 flex items-center gap-3">
                <i class="ti ti-speakerphone text-[var(--color-primary)]"></i>
                Take Action
              </h2>
              <div class="bg-gradient-to-br from-[var(--color-primary)] to-[#1E5A5A] text-white rounded-xl p-8">
                <h3 class="text-2xl font-bold text-white mb-2">Your Voice Matters</h3>
                {bill.deadline ? (
                  <p class="text-lg opacity-95 mb-6">
                    Public submissions are being accepted until <strong>{new Date(bill.deadline).toLocaleDateString('en-GB', { day: 'numeric', month: 'long', year: 'numeric' })}</strong>
                  </p>
                ) : (
                  <p class="text-lg opacity-95 mb-6">
                    Stay informed about this bill and share your concerns with your representatives.
                  </p>
                )}

                {bill.feedbackInstructions || bill.feedbackUrl ? (
                  <div class="space-y-4">
                    {bill.feedbackInstructions && (
                      <div class="text-white/95 prose prose-invert prose-lg max-w-none" set:html={marked.parse(bill.feedbackInstructions)} />
                    )}
                    {bill.feedbackUrl && (
                      <a
                        href={bill.feedbackUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-flex items-center gap-2 px-6 py-3 bg-white text-[var(--color-primary)] font-semibold rounded-lg hover:bg-gray-100 transition-colors"
                      >
                        <i class="ti ti-external-link"></i>
                        Submit Your Feedback
                      </a>
                    )}
                  </div>
                ) : (
                  <div>
                    <h4 class="text-lg font-semibold text-white mb-3">How You Can Help</h4>
                    <ol class="list-decimal list-inside space-y-2 text-white/95">
                      <li>Read the bill analysis above to understand the impacts</li>
                      <li>Share this page to raise awareness</li>
                      <li>Contact your Member of Parliament to express your concerns</li>
                      <li>
                        <a href="https://twitter.com/apdigh" target="_blank" rel="noopener noreferrer" class="underline hover:text-white transition-colors">
                          Follow APDI on Twitter
                        </a> for updates on public consultation opportunities
                      </li>
                    </ol>
                  </div>
                )}
              </div>
            </section>

            <!-- Related Bills -->
            {relatedBillsWithData.length > 0 && (
              <section>
                <h2 class="text-3xl font-bold text-black mb-4 flex items-center gap-3">
                  <i class="ti ti-network text-[var(--color-primary)]"></i>
                  Related Bills
                </h2>
                <div class="space-y-4">
                  {relatedBillsWithData.map((relatedBill) => (
                    <a
                      href={`/bills/${relatedBill.id}`}
                      class="block bg-white border-2 border-gray-200 rounded-xl p-6 hover:border-[var(--color-primary)] hover:shadow-lg transition-all duration-300"
                    >
                      <div class="flex items-start justify-between gap-4">
                        <div class="flex-1">
                          <h3 class="text-xl font-bold text-black hover:text-[var(--color-primary)] transition-colors">
                            {relatedBill.title}
                          </h3>
                        </div>
                        <i class="ti ti-arrow-right text-gray-400 flex-shrink-0"></i>
                      </div>
                    </a>
                  ))}
                </div>
              </section>
            )}
        </div>
      </div>
    </div>
  </main>

  <Footer />

  <!-- Impact Analysis Modal -->
  <div id="impactModal" class="hidden fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4" onclick="if (event.target === this) closeImpactModal()">
    <div class="bg-white/95 backdrop-blur-md rounded-xl max-w-5xl w-full max-h-[85vh] overflow-y-auto shadow-2xl border border-gray-200">
      <div class="sticky top-0 bg-white/90 backdrop-blur-md border-b border-gray-200 px-8 py-5 flex items-center justify-between">
        <h3 id="modalTitle" class="text-3xl font-bold text-black"></h3>
        <button onclick="closeImpactModal()" class="text-gray-400 hover:text-gray-600 transition-colors">
          <i class="ti ti-x text-2xl"></i>
        </button>
      </div>
      <div id="modalContent" class="px-8 py-10 prose prose-xl max-w-none whitespace-pre-wrap leading-relaxed text-gray-800"></div>
    </div>
  </div>
</BaseLayout>

<script is:inline>
  let summaryExpanded = false;

  function toggleSummary() {
    const content = document.getElementById('summary-content');
    const toggleText = document.getElementById('summary-toggle-text');
    const toggleIcon = document.getElementById('summary-toggle-icon');

    summaryExpanded = !summaryExpanded;

    if (summaryExpanded) {
      content.style.maxHeight = 'none';
      content.style.overflow = 'visible';
      toggleText.textContent = 'Show less';
      toggleIcon.classList.add('rotate-180');
    } else {
      content.style.maxHeight = '300px';
      content.style.overflow = 'hidden';
      toggleText.textContent = 'Read full summary';
      toggleIcon.classList.remove('rotate-180');
    }
  }

  // Initialize collapsed state on load
  window.addEventListener('DOMContentLoaded', () => {
    const content = document.getElementById('summary-content');
    if (content) {
      content.style.maxHeight = '300px';
      content.style.overflow = 'hidden';
      content.style.transition = 'max-height 0.3s ease-out';
    }
  });

  function openImpactModal(impactKey, impactName, analysisText) {
    const modal = document.getElementById('impactModal');
    const title = document.getElementById('modalTitle');
    const content = document.getElementById('modalContent');

    title.textContent = impactName + ' - Full Analysis';

    // Parse markdown using marked (should be available globally)
    if (typeof marked !== 'undefined') {
      content.innerHTML = marked.parse(analysisText);
    } else {
      content.textContent = analysisText;
    }

    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';

    // Reset modal scroll to top
    const modalContent = modal.querySelector('.overflow-y-auto');
    if (modalContent) {
      modalContent.scrollTop = 0;
    }
  }

  function closeImpactModal() {
    const modal = document.getElementById('impactModal');
    modal.classList.add('hidden');
    document.body.style.overflow = '';
  }

  // Close on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') closeImpactModal();
  });

  // Scroll highlight functionality
  function highlightElement(elementId) {
    const element = document.getElementById(elementId);
    if (!element) return;

    // Remove any existing highlights
    document.querySelectorAll('.scroll-highlight').forEach(el => {
      el.classList.remove('scroll-highlight');
    });

    // Add highlight class
    element.classList.add('scroll-highlight');

    // Remove highlight after animation completes
    setTimeout(() => {
      element.classList.remove('scroll-highlight');
    }, 2000);
  }

  // Handle hash changes (when clicking anchor links)
  function handleHashChange() {
    const hash = window.location.hash;
    if (hash) {
      const elementId = hash.substring(1); // Remove the #
      setTimeout(() => highlightElement(elementId), 100); // Small delay for scroll to complete
    }
  }

  // Listen for hash changes
  window.addEventListener('hashchange', handleHashChange);

  // Highlight on initial load if there's a hash
  window.addEventListener('load', handleHashChange);

  // Also handle when clicking internal links
  document.addEventListener('click', (e) => {
    const link = e.target.closest('a[href^="#"]');
    if (link) {
      const hash = link.getAttribute('href');
      if (hash && hash.length > 1) {
        const elementId = hash.substring(1);
        setTimeout(() => highlightElement(elementId), 100);
      }
    }
  });

  // Share functionality
  async function shareBill() {
    const url = window.location.href;
    const title = document.querySelector('h1').textContent;
    const text = `Check out this analysis: ${title}`;

    // Try Web Share API first (works on mobile and some desktop browsers)
    if (navigator.share) {
      try {
        await navigator.share({
          title: title,
          text: text,
          url: url
        });
      } catch (err) {
        // User cancelled or error occurred
        if (err.name !== 'AbortError') {
          console.error('Error sharing:', err);
          fallbackCopyToClipboard(url);
        }
      }
    } else {
      // Fallback: Copy to clipboard
      fallbackCopyToClipboard(url);
    }
  }

  function fallbackCopyToClipboard(url) {
    // Try modern clipboard API
    if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(url).then(() => {
        showShareNotification('Link copied to clipboard!');
      }).catch(() => {
        // Fallback to older method
        legacyCopyToClipboard(url);
      });
    } else {
      legacyCopyToClipboard(url);
    }
  }

  function legacyCopyToClipboard(url) {
    const textarea = document.createElement('textarea');
    textarea.value = url;
    textarea.style.position = 'fixed';
    textarea.style.opacity = '0';
    document.body.appendChild(textarea);
    textarea.select();

    try {
      document.execCommand('copy');
      showShareNotification('Link copied to clipboard!');
    } catch (err) {
      showShareNotification('Failed to copy link. Please copy manually.', true);
    }

    document.body.removeChild(textarea);
  }

  function showShareNotification(message, isError = false) {
    // Create notification element
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      background: ${isError ? '#ef4444' : 'var(--color-primary)'};
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 0.5rem;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      z-index: 9999;
      font-weight: 600;
      animation: slideIn 0.3s ease-out;
    `;

    document.body.appendChild(notification);

    // Remove after 3 seconds
    setTimeout(() => {
      notification.style.animation = 'slideOut 0.3s ease-out';
      setTimeout(() => {
        document.body.removeChild(notification);
      }, 300);
    }, 3000);
  }
</script>

<style>
  details summary::-webkit-details-marker {
    display: none;
  }

  /* Scroll highlight animation */
  .scroll-highlight {
    animation: highlight-pulse 2s ease-out;
  }

  @keyframes highlight-pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(42, 129, 129, 0.7);
      background-color: rgba(42, 129, 129, 0.1);
    }
    50% {
      box-shadow: 0 0 20px 10px rgba(42, 129, 129, 0.3);
      background-color: rgba(42, 129, 129, 0.05);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(42, 129, 129, 0);
      background-color: transparent;
    }
  }

  /* Share notification animations */
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(100%);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideOut {
    from {
      opacity: 1;
      transform: translateX(0);
    }
    to {
      opacity: 0;
      transform: translateX(100%);
    }
  }
</style>
